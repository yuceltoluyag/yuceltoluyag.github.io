{"version":3,"sources":["toc.js"],"names":["_createForOfIteratorHelper","r","e","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","debugLog","tag","message","window","tocContainer","document","querySelector","tocLinks","querySelectorAll","concat","forEach","link","index","href","textContent","insertAdjacentHTML","headers","map","id","getAttribute","header","getElementById","filter","item","scrollTimeout","updateTOC","_step","scrollPos","scrollY","currentHeader","previousHeader","_iterator","offsetTop","err","_ref","_headers","classList","add","nextHeader","progress","Math","min","circle","setAttribute","round","remove","liElement","parentElement","tocRect","getBoundingClientRect","liRect","scrollingUp","top","bottom","offset","clientHeight","scrollTo","behavior","addEventListener","cancelAnimationFrame","requestAnimationFrame","passive","preventDefault","targetId","targetHeader","stopPropagation","history","pushState","location","hash"],"mappings":"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","file":"toc.min.js","sourcesContent":["// TOC başlatma\n(() => {\n    // Debug log fonksiyonunu güvenli şekilde kullan\n    const debugLog = (tag, message) => {\n        if (typeof window.debugLog === \"function\") {\n            window.debugLog(tag, message);\n        } else {\n            // console.log(`[${tag}] ${message}`); // İsteğe bağlı: konsola yazdırabilirsiniz\n        }\n    };\n\n    debugLog(\"TOC\", \"TOC başlatılıyor...\");\n\n    const tocContainer = document.querySelector(\".toc-container\");\n    if (!tocContainer) {\n        debugLog(\"TOC\", \"TOC container bulunamadı\");\n        return;\n    }\n\n    const tocLinks = tocContainer.querySelectorAll(\"a.toc-href\");\n    debugLog(\"TOC\", `TOC linkleri: ${tocLinks.length}`);\n    if (!tocLinks.length) {\n        debugLog(\"TOC\", \"TOC linkleri bulunamadı\");\n        return;\n    }\n\n    // SVG template - Minimal tasarım\n    const svgTemplate = `\n    <svg viewBox=\"0 0 24 24\" class=\"toc-icon\">\n        <circle cx=\"4\" cy=\"12\" r=\"2\" class=\"toc-dot\"/>\n        <line x1=\"6\" y1=\"12\" x2=\"18\" y2=\"12\" class=\"toc-line\"/>\n    </svg>\n  `;\n\n    // Her linke SVG ekle\n    tocLinks.forEach((link, index) => {\n        debugLog(\"TOC\", `Link ${index}: ${link.href} - ${link.textContent}`);\n        link.insertAdjacentHTML(\"afterbegin\", svgTemplate);\n    });\n\n    // Başlıkları ve pozisyonlarını al\n    const headers = Array.from(tocLinks)\n        .map((link) => {\n            const id = link.getAttribute(\"href\").slice(1);\n            const header = document.getElementById(id);\n            debugLog(\"TOC\", `Başlık ${id}: ${header ? \"bulundu\" : \"bulunamadı\"}`);\n            return { id, header, link };\n        })\n        .filter((item) => item.header);\n\n    debugLog(\"TOC\", `Eşleşen başlık sayısı: ${headers.length}`);\n\n    // TOC durumunu güncelle\n    const updateTOC = () => {\n        const scrollPos = window.scrollY + 200;\n        let currentHeader = null;\n        let previousHeader = null;\n\n        // Aktif ve önceki başlığı bul\n        for (const item of headers) {\n            if (item.header.offsetTop <= scrollPos) {\n                previousHeader = currentHeader;\n                currentHeader = item;\n            } else {\n                break;\n            }\n        }\n\n        if (currentHeader) {\n            debugLog(\"TOC\", `Aktif başlık: ${currentHeader.id}`);\n\n            // TOC öğelerini güncelle\n            headers.forEach(({ header, link }, index) => {\n                // Önceki başlıkları işaretle\n                if (header.offsetTop < scrollPos) {\n                    link.classList.add(\"toc-already-read\");\n\n                    // Progress hesapla\n                    const nextHeader = headers[index + 1]?.header;\n                    const progress = nextHeader\n                        ? Math.min(\n                              100,\n                              ((scrollPos - header.offsetTop) / (nextHeader.offsetTop - header.offsetTop)) * 100\n                          )\n                        : 100;\n\n                    const circle = link.querySelector(\"circle\");\n                    if (circle) {\n                        circle.setAttribute(\"stroke-dashoffset\", Math.round(100 - progress));\n                    }\n                } else {\n                    link.classList.remove(\"toc-already-read\");\n                }\n\n                // Aktif başlığı işaretle\n                if (header === currentHeader.header) {\n                    link.classList.add(\"toc-reading\");\n\n                    // TOC'u aktif öğeye scroll et\n                    const liElement = link.parentElement;\n                    const tocRect = tocContainer.getBoundingClientRect();\n                    const liRect = liElement.getBoundingClientRect();\n\n                    // Scroll yönünü belirle\n                    const scrollingUp =\n                        previousHeader && previousHeader.header.offsetTop > currentHeader.header.offsetTop;\n\n                    if (liRect.top < tocRect.top || liRect.bottom > tocRect.bottom) {\n                        const offset = scrollingUp\n                            ? tocContainer.clientHeight * 0.7 // Yukarı scroll için offset\n                            : tocContainer.clientHeight * 0.3; // Aşağı scroll için offset\n\n                        tocContainer.scrollTo({\n                            top: liElement.offsetTop - offset,\n                            behavior: \"smooth\",\n                        });\n                    }\n                } else {\n                    link.classList.remove(\"toc-reading\");\n                }\n            });\n        } else {\n            debugLog(\"TOC\", \"Aktif başlık bulunamadı\");\n        }\n    };\n\n    // Scroll event listener\n    let scrollTimeout;\n    window.addEventListener(\n        \"scroll\",\n        () => {\n            if (scrollTimeout) {\n                window.cancelAnimationFrame(scrollTimeout);\n            }\n            scrollTimeout = requestAnimationFrame(() => {\n                debugLog(\"TOC\", `Scroll pozisyonu: ${window.scrollY}`);\n                updateTOC();\n            });\n        },\n        { passive: true }\n    );\n\n    // TOC link tıklama\n    tocLinks.forEach((link) => {\n        link.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const targetId = link.getAttribute(\"href\").slice(1);\n            const targetHeader = document.getElementById(targetId);\n\n            if (targetHeader) {\n                debugLog(\"TOC\", `Tıklanan başlık: ${targetId}`);\n\n                // Sayfa geçiş animasyonunu engelle\n                e.stopPropagation();\n\n                // Smooth scroll\n                window.scrollTo({\n                    top: targetHeader.offsetTop - 100,\n                    behavior: \"smooth\",\n                });\n\n                // URL'i güncelle ama sayfayı yenileme\n                if (history.pushState) {\n                    history.pushState(null, null, `#${targetId}`);\n                } else {\n                    location.hash = `#${targetId}`;\n                }\n            }\n        });\n    });\n\n    // İlk yüklemede güncelle\n    debugLog(\"TOC\", \"TOC ilk güncelleme yapılıyor...\");\n    updateTOC();\n})();\n"]}